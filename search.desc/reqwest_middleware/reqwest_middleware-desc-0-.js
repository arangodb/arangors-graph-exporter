searchState.loadedDescShard("reqwest_middleware", 0, "This crate provides <code>ClientWithMiddleware</code>, a wrapper around …\nA <code>ClientBuilder</code> is used to build a <code>ClientWithMiddleware</code>.\n<code>ClientWithMiddleware</code> is a wrapper around <code>reqwest::Client</code> …\nContains the error value\nA middleware that inserts the value into the <code>Extensions</code> …\nWhen attached to a <code>ClientWithMiddleware</code> (generally using …\nThere was an error running some middleware\nNext encapsulates the remaining middleware chain to run in …\nContains the success value\nThis is a wrapper around <code>reqwest::RequestBuilder</code> exposing …\nWhen attached to a <code>ClientWithMiddleware</code> (generally using …\nError from the underlying reqwest client\nReturns a <code>ClientWithMiddleware</code> using this builder …\nSee <code>Client::delete</code>\nSee <code>Client::execute</code>\nExecutes a request with initial <code>Extensions</code>.\nReturns a mutable reference to the internal set of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>Client::get</code>\nInvoked with a request before sending it. If you want to …\nSee <code>Client::head</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the error is related to the request or …\nReturns true if the error is from a type <code>Builder</code>.\nReturns true if the error is related to connect.\nReturns true if the error is related to decoding the …\nReturns true if the error is from any middleware.\nReturns true if the error is from a <code>RedirectPolicy</code>.\nReturns true if the error is related to the request.\nReturns true if the error is from …\nReturns true if the error is related to a timeout.\nSee <code>ClientBuilder</code> for a more ergonomic way to build …\nSee <code>Client::patch</code>\nSee <code>Client::post</code>\nSee <code>Client::put</code>\nSee <code>Client::request</code>\nReturns the status code, if the error was generated from a …\nAttempt to clone the RequestBuilder.\nReturns a possible URL related to this error.\nReturns a mutable reference to the URL related to this …\nConvenience method to attach middleware.\nAdd middleware to the chain. <code>with</code> is more ergonomic if you …\nAdd a request initialiser to the chain. <code>with_init</code> is more …\nInserts the extension into this request builder\nConvenience method to attach a request initialiser.\nAdds a url related to this error (overwriting any …\nStrips the related URL from this error (if, for example, …")