searchState.loadedDescShard("retry_policies", 0, "A collection of plug-and-play retry policies.\nJitter between <code>min_retry_interval</code> and the calculated …\nGive up.\nJitter between 0 and the calculated backoff duration.\nHow to apply jitter to the retry intervals.\nDon’t apply any jitter.\nRetry after the specified timestamp.\nOutcome of evaluating a retry policy for a failed task.\nA policy for deciding whether and when to retry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if a task should be retried according to a retry …\nExponential backoff with optional jitter.\nBuilds an exponential backoff policy.\nExponential backoff with a maximum retry duration.\nSet what base to use for the exponential.\nBase of the exponential\nBuilds an <code>ExponentialBackoff</code> with the given maximum …\nBuilds an <code>ExponentialBackoff</code> with the given maximum total …\nBuilds an <code>ExponentialBackoff</code> with the given maximum total …\nReturns a builder.\nCreate a <code>RetryPolicy</code> for a task started at the given\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet what type of jitter to apply.\nHow we apply jitter to the calculated backoff intervals.\nMaximum number of allowed retries attempts.\nMaximum number of allowed retries attempts.\nMaximum waiting time between two retry attempts.\nMinimum waiting time between two retry attempts (it can …\nAdd min &amp; max retry interval bounds. <em>Default [1s, 30m]</em>.")