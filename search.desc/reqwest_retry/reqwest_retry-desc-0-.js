searchState.loadedDescShard("reqwest_retry", 0, "Middleware to retry failed HTTP requests built on …\nThe default <code>RetryableStrategy</code> for <code>RetryTransientMiddleware</code>.\nUnresolvable error.\nA policy for deciding whether and when to retry.\n<code>RetryTransientMiddleware</code> offers retry logic for requests …\nClassification of an error/status returned by request.\nA strategy to create a <code>Retryable</code> from a …\nThe failure was due to something tha might resolve in the …\nDefault request failure retry strategy.\nDefault request success retry strategy.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to map a <code>reqwest</code> response into <code>Retryable</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct <code>RetryTransientMiddleware</code> with  a retry_policy.\nConstruct <code>RetryTransientMiddleware</code> with  a retry_policy …\nDetermine if a task should be retried according to a retry …\nExponential backoff with optional jitter.\nBuilds an exponential backoff policy.\nExponential backoff with a maximum retry duration.\nSet what base to use for the exponential.\nBase of the exponential\nBuilds an <code>ExponentialBackoff</code> with the given maximum …\nBuilds an <code>ExponentialBackoff</code> with the given maximum total …\nBuilds an <code>ExponentialBackoff</code> with the given maximum total …\nReturns a builder.\nCreate a <code>RetryPolicy</code> for a task started at the given\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet what type of jitter to apply.\nHow we apply jitter to the calculated backoff intervals.\nMaximum number of allowed retries attempts.\nMaximum number of allowed retries attempts.\nMaximum waiting time between two retry attempts.\nMinimum waiting time between two retry attempts (it can …\nAdd min &amp; max retry interval bounds. <em>Default [1s, 30m]</em>.")